@inject IJSRuntime JS

<div>
    <div class="h-full flex flex-col justify-center items-center mb-5 max-sm:mb-4">
        <div 
            class="mt-6 max-sm:mt-4 hover:text-[#26272A] dark:hover:text-white cursor-pointer"
            title="Search a different word" 
            @onclick="@RefreshSearch"
        >
            <Icons IconType="Icons.IconTypes.ReDoIcon" />
        </div>
        <div class="bg-zinc-300 dark:bg-zinc-800 mt-5 max-sm:mt-3 flex flex-col justify-center items-center text-center gap-4 max-sm:gap-2 p-7 px-9 max-sm:p-4 max-sm:px-5 shadow-xl rounded-3xl">
            <p class="font-bold tracking-wider text-7xl max-sm:text-[1.8rem] drop-shadow-lg dark:drop-shadow-2xl">
                @WordDefinition.Word
            </p>
            <div class="flex flex-row justify-center items-center gap-2 max-sm:gap-1">
                @foreach (Phonetic phonetic in WordDefinition.Phonetics)
                {
                    if (!phonetic.Audio.Equals(""))
                    {
                        <div 
                            key="@Guid.NewGuid()" 
                            class="@($"cursor-pointer hover:text-[#26272A] dark:hover:text-white {(_playingAudio[phonetic.Audio] ? "animate-bounce": "")}")"
                            title="Listen to pronunciation" 
                            @onclick="@(() => PlayAudio(phonetic.Audio))"
                        >
                            <Icons IconType="Icons.IconTypes.MicrophoneIcon" />
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    <div class="mb-10 max-sm:mb-10 w-3/5 mx-auto max-2xl:w-4/5 max-sm:w-[90%] flex flex-col justify-start items-start text-left gap-5 max-sm:gap-4">
        @foreach (Meaning meaning in WordDefinition.Meanings)
        {
            <div key="@Guid.NewGuid()" class="bg-zinc-300 dark:bg-zinc-800 p-5 max-sm:p-3 rounded-3xl shadow-xl">
                <p class="text-[1.8rem] max-sm:text-[1.2rem] font-bold drop-shadow-lg dark:drop-shadow-2xl">
                    @meaning.PartOfSpeech
                </p>
                <div>
                    @foreach (Definitions definitions in meaning.Definitions)
                    {
                        <div key="@Guid.NewGuid()" class="mt-5 max-sm:mt-3 ml-7 max-sm:ml-6">
                            <p class="text-[1.65rem] max-sm:text-[1.15rem] list-item">@definitions.Definition</p>
                            @if (definitions.Example is not null && definitions.Example != "")
                            {
                                <p class="text-[1.5rem] max-sm:text-[1.1rem] italic">@($"\"{@definitions.Example}\"")</p>
                            }
                        </div>
                    }
                    @if (meaning.Synonyms.Count != 0 || meaning.Antonyms.Count != 0)
                    {
                        <div class="ml-1">
                            @if (meaning.Synonyms.Count != 0)
                            {
                                <p class="mt-5 max-sm:mt-3 text-[1.4rem] max-sm:text-[1.05rem] flex justify-start items-center gap-2 flex-wrap">
                                    @("Similar:")
                                    @foreach (string synonym in meaning.Synonyms)
                                    {
                                        <span 
                                            key="@Guid.NewGuid()"
                                            class="rounded-full pb-1 max-sm:pb-[0.15rem] px-3 max-sm:px-2 cursor-pointer bg-zinc-200 dark:bg-zinc-700 hover:bg-slate-300 dark:hover:bg-slate-700 shadow-xl"
                                            title="@($"Search '{synonym}'")" 
                                            @onclick="@(() => SearchWord(synonym))"
                                        >
                                            @synonym
                                        </span>
                                    }
                                </p>
                            }
                            @if (meaning.Antonyms.Count != 0)
                            {
                                <p class="mt-5 max-sm:mt-3 text-[1.4rem] max-sm:text-[1.05rem] flex justify-start items-center gap-2 flex-wrap">
                                    @("Opposite: ")
                                    @foreach (string antonym in meaning.Antonyms)
                                    {
                                        <span 
                                            key="@Guid.NewGuid()"
                                            class="rounded-full pb-1 max-sm:pb-[0.15rem] px-3 max-sm:px-2 cursor-pointer bg-zinc-200 dark:bg-zinc-700 hover:bg-slate-300 dark:hover:bg-slate-700 shadow-xl"
                                            title="@($"Search '{antonym}'")" 
                                            @onclick="@(() => SearchWord(antonym))"
                                        >
                                            @antonym
                                        </span>
                                    }
                                </p>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public WordDefinition WordDefinition { get; set; } = new();
    [Parameter] public Func<string, Task> SearchWord { get; set; } = (_) => Task.CompletedTask;
    [Parameter] public Action RefreshSearch { get; set; } = () => { };
    private readonly Dictionary<string, bool> _playingAudio = [];

    protected override void OnInitialized()
    {
        foreach (Phonetic phonetic in WordDefinition.Phonetics)
        {
            _playingAudio.Add(phonetic.Audio, false);
        }
    }

    public async Task PlayAudio(string audioUrl)
    {
        _playingAudio[audioUrl] = true;
        await JS.InvokeVoidAsync("playAudio", audioUrl);
        await Task.Delay(2500);
        _playingAudio[audioUrl] = false;
    }
}