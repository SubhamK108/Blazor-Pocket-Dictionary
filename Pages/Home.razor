@page "/"

<PageTitle>Pocket Dictionary</PageTitle>

@if (!Loading && WordDefinition.Word.Equals(""))
{
    <div class="h-full flex flex-col justify-center items-center text-center">
        <p
            class="mt-52 max-sm:mt-44 text-8xl max-sm:text-5xl tracking-widest font-sans font-bold drop-shadow-lg dark:drop-shadow-2xl">
            Pocket Dictionary
        </p>
        <input 
            type="text"
            class="mt-24 max-sm:mt-12 p-5 max-sm:p-3 text-5xl max-sm:text-[1.5rem] max-sm:leading-6 border border-[#AEAEAE] rounded-3xl max-sm:rounded-2xl font-sans h-[5.5rem] max-sm:h-[3.4rem] w-[45rem] max-sm:w-[20rem] text-center focus:outline-none shadow-lg dark:shadow-2xl tracking-widest"
            @bind="@SearchedWord" 
            @bind:event="oninput" 
            @onkeydown="@(async (e) => {
                if ((e.Key.Equals("Enter") || e.Key.Equals("Go")) && !SearchedWord.Equals(""))
                {
                    await GetWordDefinition(SearchedWord);
                }
            })"
            placeholder="Enter a word..." 
            @ref="@_inputField"
        />
        <button
            class="mt-10 max-sm:mt-6 cursor-pointer disabled:cursor-default hover:text-[#26272A] dark:hover:text-white disabled:text-zinc-500 dark:disabled:text-zinc-600"
            title="Search Word" 
            @onclick="@(() => GetWordDefinition(SearchedWord))"
            disabled="@(SearchedWord.Equals(""))"
        >
            <Icons IconType="Icons.IconTypes.SearchIcon" />
        </button>
        <div class="mt-24 max-sm:mt-12 h-[10rem] w-[45%] max-sm:h-[10rem] max-sm:w-[20rem] flex justify-center items-start">
            @if (IsError)
            {
                <WordDefinitionError ErrorText="@ErrorText" CloseError="@CloseError" />
            }
        </div>
        <div class="text-center mb-1">
            <p class="px-12 max-sm:text-[0.9rem] font-sans">
                Made with ❤️ by
                <a 
                    href="https://www.subhamk.com/" 
                    target="_blank"
                    class="underline hover:text-[#26272A] dark:hover:text-white"
                >
                    Subham K.
                </a>
                <br>
                With the help of 
                <a 
                    href="https://github.com/meetDeveloper/freeDictionaryAPI" 
                    target="_blank"
                    class="underline hover:text-[#26272A] dark:hover:text-white"
                >
                    Free Dictionary API
                </a>
            </p>
        </div>
    </div>
}
else if (Loading)
{
    <WordDefinitionLoader />
}
else if (!Loading && !WordDefinition.Word.Equals(""))
{
    <WordDefinitionDisplay WordDefinition="@WordDefinition" SearchWord="@SearchSpecificWord" RefreshSearch="@RefreshSearch"/>
}

@code {
    private ElementReference _inputField;
    public string SearchedWord { get; set; } = "";
    public WordDefinition WordDefinition { get; set; } = new();
    public bool Loading { get; set; } = false;
    public bool IsError { get; set; } = false;
    public string ErrorText { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!Loading && WordDefinition.Word.Equals(""))
        {
            await _inputField.FocusAsync();
        }
    }
    
    public async Task GetWordDefinition(string word)
    {
        Loading = true;
        await InvokeAsync(StateHasChanged);
        (WordDefinition, ResponseResult responseResult) = await FetchWordDefinitionAsync(word);
        if (responseResult != ResponseResult.SUCCESS)
        {
            SearchedWord = "";
            ErrorText = responseResult switch
            {
                ResponseResult.NOT_FOUND => $"Oops! '{word}' isn't there in this dictionary, you have to use the internet for this word. Sorry. 😞",
                _ => "The Server is facing some problems right now, please try again a bit later, or use the internet for this word. Sorry. 😞"
            };
            IsError = true;
        }
        Loading = false;
        await InvokeAsync(StateHasChanged);
    }

    public void CloseError() => IsError = false;

    public async Task SearchSpecificWord(string word) => await GetWordDefinition(word);

    public void RefreshSearch() 
    {
        IsError = false;
        SearchedWord = "";
        WordDefinition = new();
    }
}